#!/usr/bin/env bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT="${ETCD_PORT:-4001}"
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH="${ETCD_PATH:-/hehe/services/elasticsearch}"
export ETCD_TTL="${ETCD_TTL:-20}"

# configure ports
export HTTP_PORT="${HTTP_PORT:-9200}"
export TRANSPORT_PORT="${TRANSPORT_PORT:-9300}"
export EXTERNAL_TRANSPORT_PORT=${EXTERNAL_TRANSPORT_PORT:-$TRANSPORT_PORT}
export EXTERNAL_HTTP_PORT=${EXTERNAL_HTTP_PORT:-$HTTP_PORT}

# wait for etcd to be available
until etcdctl --no-sync -C "$ETCD" ls >/dev/null 2>&1; do
  echo "elasticsearch: waiting for etcd at $ETCD..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $((ETCD_TTL+1))

# wait for confd to run once and install initial templates
until confd -onetime -node "$ETCD" -confdir /app --log-level error; do
  echo "elasticsearch: waiting for confd to write initial templates..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done


function run {
  # Add elasticsearch as command if needed
  if [ "${1:0:1}" = '-' ]; then
  	set -- elasticsearch "$@"
  fi

  # Drop root privileges if we are running elasticsearch
  # allow the container to be started with `--user`
  if [ "$1" = 'elasticsearch' -a "$(id -u)" = '0' ]; then
  	# Change the ownership of /usr/share/elasticsearch/data to elasticsearch
  	chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data

  	set -- gosu elasticsearch "$@"
  fi

  # As argument is not related to elasticsearch,
  # then assume that user wants to run his own process,
  # for example a `bash` shell to explore this image
  exec "$@"
}

run elasticsearch &

SERVICE_PID=$!

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node "$ETCD" -confdir /app --log-level error --interval 5 &

# wait for the service to become available on PORT
until curl -sSL --fail http://localhost:${HTTP_PORT}/ | grep -e 'version' >/dev/null 2>&1; do sleep 1; done

echo "elasticsearch is running..."

# publish the service to etcd using the injected HOST and EXTERNAL_HTTP_PORT
if [[ ! -z $EXTERNAL_HTTP_PORT ]]; then
  # configure service discovery
  PORT=$HTTP_PORT
  PROTO=tcp

  set +e

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PORT\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    etcdctl --no-sync -C "$ETCD" set "$ETCD_PATH/hosts/${HOST}" "{\"IP\":\"${HOST}\",\"HttpPort\":${EXTERNAL_HTTP_PORT},\"TransportPort\":${EXTERNAL_TRANSPORT_PORT}}" --ttl "$ETCD_TTL" >/dev/null
    sleep $((ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  /app/bin/clean
  exit 1

fi


wait
